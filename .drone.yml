kind: pipeline
type: docker
name: default
 
trigger:
  event:
    - push

steps:
  - name: build
    image: mcr.microsoft.com/dotnet/sdk:6.0
    commands:
      - cd Sources/
      - dotnet restore MinecraftCrafting.sln
      - dotnet build MinecraftCrafting.sln -c Release --no-restore

  - name: tests
    image: mcr.microsoft.com/dotnet/sdk:6.0
    commands:
      - cd Sources/
      - dotnet restore MinecraftCrafting.sln
      - dotnet test MinecraftCrafting.sln -c Release --no-restore

  - name: code-analysis
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dronesonarplugin-dotnet6
    commands:
      - cd Sources/
      - dotnet restore MinecraftCrafting.sln
      - dotnet sonarscanner begin /k:MinecraftCrafting /d:sonar.host.url=$${PLUGIN_SONAR_HOST} /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml" /d:sonar.coverage.exclusions="Tests/**" /d:sonar.login=$${PLUGIN_SONAR_TOKEN} 
      - dotnet build MinecraftCrafting.sln -c Release --no-restore
      - dotnet test MinecraftCrafting.sln --logger trx --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --collect "XPlat Code Coverage"
      - reportgenerator -reports:"**/coverage.cobertura.xml" -reporttypes:SonarQube -targetdir:"coveragereport"
      - dotnet publish MinecraftCrafting.sln -c Release --no-restore -o $CI_PROJECT_DIR/build/release
      - dotnet sonarscanner end /d:sonar.login=$${PLUGIN_SONAR_TOKEN}
    secrets: [ SECRET_SONAR_LOGIN ]
    settings:
      sonar_host: https://codefirst.iut.uca.fr/sonar/
      sonar_token:
        from_secret: SECRET_SONAR_LOGIN
    when:
      branch:
        - master
    depends_on: [build]

  - name: generate-and-deploy-docs
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-docdeployer
    failure: ignore
    volumes:
      - name: docs
        path: /docs
    commands:
      - /entrypoint.sh
    when:
      branch:
        - master
    depends_on: [ build ]

  - name: docker-build-website
    image: plugins/docker
    settings:
       dockerfile: Sources/Minecraft.Crafting.Website/Dockerfile
       context: .
       registry: hub.codefirst.iut.uca.fr
       repo: hub.codefirst.iut.uca.fr/valentin.clergue/blazor.website
       username:
         from_secret: SECRET_REGISTRY_USERNAME
       password:
         from_secret: SECRET_REGISTRY_PASSWORD
    when:
      branch:
        - master
    depends_on: [ build ]

  - name: docker-build-api
    image: plugins/docker
    settings:
       dockerfile: Sources/Minecraft.Crafting.Api/Dockerfile
       context: .
       registry: hub.codefirst.iut.uca.fr
       repo: hub.codefirst.iut.uca.fr/valentin.clergue/blazor.api
       username:
         from_secret: SECRET_REGISTRY_USERNAME
       password:
         from_secret: SECRET_REGISTRY_PASSWORD
    when:
      branch:
        - master
    depends_on: [ build ]

  - name: deploy-container-blazorwebsite
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
    environment:
        IMAGENAME: hub.codefirst.iut.uca.fr/valentin.clergue/blazor.website:latest
        CONTAINERNAME: blazorwebsite
        COMMAND: create
        OVERWRITE: true
        CODEFIRST_CLIENTDRONE_ENV_HOST_URL: https://codefirst.iut.uca.fr/containers/MinecraftCraftingCorp-blazorapi:80
        CODEFIRST_CLIENTDRONE_ENV_STYLES_PATH: MinecraftCraftingCorp-blazorwebsite
        ADMINS: valentinclergue,yorickgeoffre
    when:
      branch:
        - master
    depends_on: [ docker-build-website ]

  - name: deploy-container-blazorapi
    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
    environment:
        IMAGENAME: hub.codefirst.iut.uca.fr/valentin.clergue/blazor.api:latest
        CONTAINERNAME: blazorapi
        COMMAND: create
        OVERWRITE: true
        ADMINS: valentinclergue,yorickgeoffre
    when:
      branch:
        - master
    depends_on: [ docker-build-api ]

volumes:
- name: docs
  temp: {}